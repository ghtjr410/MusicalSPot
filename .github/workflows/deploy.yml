name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
# 서버 배포 자동화
  deploy_backend_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Deploy Backend
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

# 서버 배포 최적화
# actions/cache 액션을 사용하여 캐시를 설정하고 빌드시간을 최적화
    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches   # Gradle 캐시 경로
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}  # 캐시 키
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'corretto'  # Amazon Corretto 배포판 사용 본인이 사용하는 jdk종류에 맞게 검색해서 사용 openjdk,eclipse,Oracle 등등

    - name: Grant execute permission for gradlew
      run: chmod +x back/gradlew # gradlew에 실행 권한을 부여하기 위해 back/경로 추가

    - name: Build with Gradle
      run: ./gradlew build
      env: # 추가
        DB_URL: ${{ secrets.DB_URL }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        REDIS_SSL_ENABLED: ${{ secrets.REDIS_SSL_ENABLED }}
      working-directory: back # working-directory 옵션을 사용하여 back 디렉토리에서 명령어 실행

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'ghtjr-azure-server'
        # 기본 슬롯만 사용하므로 slot-name 제거했음 원래는 슬롯자리
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: 'back/build/libs/back-0.0.1-SNAPSHOT.jar'